/*
################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
*/

plugins {
    id 'java'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.7.3"
}

group = "org.zeromq"
version = "2.0.0"

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencies {
    compile 'org.zeromq:czmq-jni:+'
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

//  ------------------------------------------------------------------
//  Build section

task generateJniHeaders(type: Exec, dependsOn: 'classes') {
    def classpath = sourceSets.main.output.classesDir
    def appclasspath = configurations.runtime.files*.getAbsolutePath().join(":")
    def nativeIncludes = "src/native/include"
    def jniClasses = [
            'org.zeromq.zyre.Zyre',
            'org.zeromq.zyre.ZyreEvent'
    ]
    commandLine("javah", "-d", "$nativeIncludes", "-classpath", "$classpath:$appclasspath", *jniClasses)
}
tasks.withType(Test) {
    systemProperty "java.library.path", "/usr/lib:/usr/local/lib:$projectDir"
}
task initCMake(type: Exec, dependsOn: 'generateJniHeaders') {
    commandLine "cmake", "."
}
task buildNative(type: Exec, dependsOn: 'initCMake') {
    commandLine "make"
}
jar.dependsOn buildNative
test.dependsOn buildNative

//  ------------------------------------------------------------------
//  Install and Publish section

task sourcesJar(type: Jar, dependsOn: 'classes') {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom.withXml {
                asNode().appendNode('packaging', 'jar')
                asNode().appendNode('name', 'zyre-jni')
                asNode().appendNode('description', 'an open-source framework for proximity-based P2P apps')
                asNode().appendNode('url', 'http://github.com/zeromq/zyre')

                def license = asNode().appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Mozilla Public License Version 2.0')
                license.appendNode('url', 'https://www.mozilla.org/en-US/MPL/2.0/')

                def scm = asNode().appendNode('scm')
                scm.appendNode('connection', 'http://github.com/zeromq/zyre.git')
                scm.appendNode('developerConnection', 'http://github.com/zeromq/zyre.git')
                scm.appendNode('url', 'http://github.com/zeromq/zyre')
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['mavenJava']
    publish = true
    override = true
    pkg {
        repo = "maven"
        name = "zyre-jni"
        desc = "an open-source framework for proximity-based P2P apps"
        userOrg = System.getenv('BINTRAY_USER_ORG')
        licenses = ["MPL-2.0"]
        websiteUrl = 'http://github.com/zeromq/zyre'
        issueTrackerUrl = 'http://github.com/zeromq/zyre/issues'
        vcsUrl = 'http://github.com/zeromq/zyre.git'
        githubRepo = System.getenv('BINTRAY_USER_ORG') + '/zyre'
        version {
            name = '2.0.0'
            vcsTag= '2.0.0'
        }
    }
}

//  ------------------------------------------------------------------
//  Cleanup section

clean.doFirst {
    delete "${rootDir}/CMakeCache.txt"
    delete "${rootDir}/libczmqjni.so"
}
